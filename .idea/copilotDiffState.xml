<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/comunicadosespol/PublComunicadosActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/comunicadosespol/PublComunicadosActivity.java" />
              <option name="originalContent" value="package com.example.comunicadosespol;&#10;&#10;import android.content.Intent;&#10;import android.net.Uri;&#10;import android.os.Bundle;&#10;import android.provider.MediaStore;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.CheckBox;&#10;import android.widget.EditText;&#10;import android.widget.ImageSwitcher;&#10;import android.widget.ImageView;&#10;import android.widget.RadioButton;&#10;import android.widget.RadioGroup;&#10;import android.widget.Spinner;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.activity.EdgeToEdge;&#10;import androidx.annotation.Nullable;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;&#10;import java.io.BufferedWriter;&#10;import java.io.File;&#10;import java.io.FileInputStream;&#10;import java.io.FileOutputStream;&#10;import java.io.FileWriter;&#10;import java.io.IOException;&#10;import java.io.InputStream;&#10;import java.io.OutputStream;&#10;import java.text.ParseException;&#10;import java.text.SimpleDateFormat;&#10;import java.util.ArrayList;&#10;import java.util.Calendar;&#10;import java.util.Date;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;import Modelo.DatosIncompletosException;&#10;&#10;public class PublComunicadosActivity extends AppCompatActivity {&#10;    private RadioGroup rtipos;&#10;    private Spinner spArea;&#10;    private CheckBox chkEst;&#10;    private CheckBox chkPrf;&#10;    private CheckBox chkAdm;&#10;    private EditText editTitle;&#10;    private EditText editDesc;&#10;    private Button btnImg;&#10;    private Button btnPublicar;&#10;    private Button btnCancelar;&#10;    private Uri imageUri;&#10;&#10;    private TextView textLugar;&#10;    private EditText editLugar;&#10;    private TextView textFecha;&#10;    private EditText editFecha;&#10;    private TextView textUrgencia;&#10;    private Spinner spUrgencia;&#10;    private ImageView vistaImagen;&#10;    private static final int PICK_IMAGE = 100;&#10;    private String savedImagePath;&#10;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        EdgeToEdge.enable(this);&#10;        setContentView(R.layout.activity_publ_comunicados);&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -&gt; {&#10;            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);&#10;            return insets;&#10;        });&#10;&#10;        // Inicializar todos los campos&#10;        textLugar = findViewById(R.id.textLugar);&#10;        editLugar = findViewById(R.id.editTextLugar);&#10;&#10;        textFecha = findViewById(R.id.textFecha);&#10;        editFecha = findViewById(R.id.editTextFecha);&#10;&#10;        textUrgencia = findViewById(R.id.textUrgencia);&#10;        spUrgencia = findViewById(R.id.spinnerUrgencia);&#10;&#10;        vistaImagen = findViewById(R.id.imageView);&#10;&#10;        editTitle = findViewById(R.id.editTextTitulo);&#10;        editDesc = findViewById(R.id.editTextDescripcion);&#10;        spArea = findViewById(R.id.spinArea);&#10;        chkEst = findViewById(R.id.chEstudiantes);&#10;        chkPrf = findViewById(R.id.Profesores);&#10;        chkAdm = findViewById(R.id.chAdministrativo);&#10;&#10;        btnImg = findViewById(R.id.btnCargarImagen);&#10;        btnPublicar = findViewById(R.id.btnPubl);&#10;        rtipos = findViewById(R.id.rdTipo);&#10;        btnCancelar = findViewById(R.id.btnAtras);&#10;        btnImg.setOnClickListener(v -&gt; openGallery());&#10;&#10;&#10;&#10;        rtipos.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {&#10;            @Override&#10;            public void onCheckedChanged(RadioGroup group, int checkedId) {&#10;                // 'checkedId' es el id del RadioButton seleccionado&#10;                if (checkedId != -1) { // -1 significa que no hay selección&#10;                    // Buscar el RadioButton por su id&#10;                    RadioButton radioSeleccionado = findViewById(checkedId);&#10;                    int posicion = group.indexOfChild(radioSeleccionado);&#10;&#10;                    // Ejemplo: si no es la primera opción&#10;                    if (!(posicion &lt; 0 || posicion &gt; 1)) {&#10;                        mostrarCampo(posicion);&#10;                    }&#10;                }&#10;            }&#10;        });&#10;&#10;&#10;&#10;    }&#10;&#10;    private void openGallery() {&#10;        Intent gallery = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);&#10;        startActivityForResult(gallery, PICK_IMAGE);&#10;    }&#10;&#10;    @Override&#10;    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {&#10;        super.onActivityResult(requestCode, resultCode, data);&#10;&#10;        if (requestCode == PICK_IMAGE &amp;&amp; resultCode == RESULT_OK &amp;&amp; data != null) {&#10;            imageUri = data.getData();&#10;            // Guardar la imagen seleccionada en almacenamiento interno&#10;            savedImagePath = saveImageToInternalStorage(imageUri);&#10;            if (savedImagePath != null) {&#10;                vistaImagen.setImageURI(Uri.fromFile(new File(savedImagePath)));&#10;                Toast.makeText(this, &quot;Imagen guardada localmente&quot;, Toast.LENGTH_SHORT).show();&#10;            } else {&#10;                Toast.makeText(this, &quot;Error al guardar la imagen&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        }&#10;    }&#10;&#10;    private String saveImageToInternalStorage(Uri uri) {&#10;        try {&#10;            InputStream inputStream = getContentResolver().openInputStream(uri);&#10;            File imageFile = new File(getFilesDir(), &quot;comunicado_img_&quot; + System.currentTimeMillis() + &quot;.jpg&quot;);&#10;            OutputStream outputStream = new FileOutputStream(imageFile);&#10;            byte[] buffer = new byte[4096];&#10;            int bytesRead;&#10;            while ((bytesRead = inputStream.read(buffer)) != -1) {&#10;                outputStream.write(buffer, 0, bytesRead);&#10;            }&#10;            outputStream.close();&#10;            inputStream.close();&#10;            return imageFile.getAbsolutePath();&#10;        } catch (Exception e) {&#10;            return null;&#10;        }&#10;    }&#10;&#10;    private void saveImagePathToFile(String path) {&#10;        try {&#10;            FileOutputStream fos = openFileOutput(&quot;image_path.txt&quot;, MODE_PRIVATE);&#10;            fos.write(path.getBytes());&#10;            fos.close();&#10;        } catch (IOException e) {&#10;            Toast.makeText(this, &quot;Error al guardar la ruta de la imagen&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    public void cargarImg(View view){&#10;        // Cargar la imagen guardada desde almacenamiento interno&#10;        try {&#10;            File file = new File(getFilesDir(), &quot;image_path.txt&quot;);&#10;            if (file.exists()) {&#10;                InputStream is = openFileInput(&quot;image_path.txt&quot;);&#10;                byte[] buffer = new byte[(int) file.length()];&#10;                is.read(buffer);&#10;                is.close();&#10;                String path = new String(buffer);&#10;                File imgFile = new File(path);&#10;                if (imgFile.exists()) {&#10;                    vistaImagen.setImageURI(Uri.fromFile(imgFile));&#10;                    Toast.makeText(this, &quot;Imagen cargada&quot;, Toast.LENGTH_SHORT).show();&#10;                } else {&#10;                    Toast.makeText(this, &quot;No se encontró la imagen guardada&quot;, Toast.LENGTH_SHORT).show();&#10;                }&#10;            } else {&#10;                Toast.makeText(this, &quot;No hay imagen guardada&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        } catch (Exception e) {&#10;            Toast.makeText(this, &quot;Error al cargar la imagen&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    public void publicarComunicado(View view){&#10;        // Validar que todos los campos necesarios estén llenos&#10;        if (!validarCampos()) {&#10;            return;&#10;        }&#10;&#10;        // Obtener datos comunes&#10;        String tipo = obtenerTipoSeleccionado();&#10;        String area = spArea.getSelectedItem().toString();&#10;        String titulo = editTitle.getText().toString().trim();&#10;        String audiencia = obtenerAudienciaSeleccionada();&#10;        String descripcion = editDesc.getText().toString().trim();&#10;        String nombreImagen = savedImagePath != null ? new File(savedImagePath).getName() : &quot;&quot;;&#10;&#10;        // Generar ID único&#10;        int nuevoId = obtenerSiguienteId();&#10;&#10;        // Crear línea para guardar según el tipo&#10;        String lineaComunicado = &quot;&quot;;&#10;        if (tipo.equals(&quot;anuncio&quot;)) {&#10;            String urgencia = spUrgencia.getSelectedItem().toString();&#10;            lineaComunicado = nuevoId + &quot;,&quot; + tipo + &quot;,&quot; + area + &quot;,&quot; + titulo + &quot;,&quot; +&#10;                            audiencia + &quot;,&quot; + descripcion + &quot;,&quot; + nombreImagen + &quot;,&quot; + urgencia;&#10;        } else if (tipo.equals(&quot;evento&quot;)) {&#10;            String lugar = editLugar.getText().toString().trim();&#10;            String fecha = editFecha.getText().toString().trim();&#10;            lineaComunicado = nuevoId + &quot;,&quot; + tipo + &quot;,&quot; + area + &quot;,&quot; + titulo + &quot;,&quot; +&#10;                            audiencia + &quot;,&quot; + descripcion + &quot;,&quot; + nombreImagen + &quot;,&quot; + lugar + &quot;,&quot; + fecha;&#10;&#10;        }&#10;        Toast.makeText(this, lineaComunicado, Toast.LENGTH_SHORT).show();&#10;        // Guardar en comunicados.txt&#10;        if (guardarComunicado(lineaComunicado)) {&#10;            if (savedImagePath != null) {&#10;                saveImagePathToFile(savedImagePath);&#10;            }&#10;            Toast.makeText(this, &quot;Comunicado publicado exitosamente&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;        } else {&#10;            Toast.makeText(this, &quot;Error al publicar el comunicado&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;    public void cancelar(View view){&#10;        // Eliminar la imagen guardada si existe&#10;        if (savedImagePath != null) {&#10;            File imgFile = new File(savedImagePath);&#10;            if (imgFile.exists()) {&#10;                imgFile.delete();&#10;            }&#10;            // También elimina el archivo de ruta&#10;            File pathFile = new File(getFilesDir(), &quot;image_path.txt&quot;);&#10;            if (pathFile.exists()) {&#10;                pathFile.delete();&#10;            }&#10;        }&#10;        finish();&#10;    }&#10;&#10;    private boolean validarCampos() {&#10;        try {&#10;            if (editTitle.getText().toString().trim().isEmpty()) {&#10;                throw new DatosIncompletosException(&quot;Ingrese un título&quot;);&#10;            }&#10;            if (editDesc.getText().toString().trim().isEmpty()) {&#10;                throw new DatosIncompletosException(&quot;Ingrese una descripción&quot;);&#10;            }&#10;            if (spArea.getSelectedItemPosition() == 0) {&#10;                throw new DatosIncompletosException(&quot;Seleccione un área&quot;);&#10;            }&#10;            if (!chkEst.isChecked() &amp;&amp; !chkPrf.isChecked() &amp;&amp; !chkAdm.isChecked()) {&#10;                throw new DatosIncompletosException(&quot;Seleccione al menos una audiencia&quot;);&#10;            }&#10;&#10;            String tipo = obtenerTipoSeleccionado();&#10;            if (tipo.equals(&quot;anuncio&quot;) &amp;&amp; spUrgencia.getSelectedItemPosition() == 0) {&#10;                throw new DatosIncompletosException(&quot;Seleccione un nivel de urgencia&quot;);&#10;            }&#10;            if (tipo.equals(&quot;evento&quot;)) {&#10;                if (editLugar.getText().toString().trim().isEmpty()) {&#10;                    throw new DatosIncompletosException(&quot;Ingrese el lugar del evento&quot;);&#10;                }&#10;                if (editFecha.getText().toString().trim().isEmpty()) {&#10;                    throw new DatosIncompletosException(&quot;Ingrese la fecha del evento&quot;);&#10;                }&#10;                // Validar formato y que la fecha sea futura&#10;                if (!validarFechaEvento(editFecha.getText().toString().trim())) {&#10;                    return false;&#10;                }&#10;            }&#10;&#10;            return true;&#10;&#10;        } catch (DatosIncompletosException e) {&#10;            Toast.makeText(this, e.getMessage(), Toast.LENGTH_SHORT).show();&#10;            return false;&#10;        }&#10;    }&#10;&#10;    private boolean validarFechaEvento(String fechaTexto) {&#10;        SimpleDateFormat formatoFecha = new SimpleDateFormat(&quot;MM/dd/yyyy&quot;, Locale.US);&#10;        formatoFecha.setLenient(false); // No permitir fechas inválidas como 13/32/2024&#10;&#10;        try {&#10;            // Verificar formato&#10;            Date fechaEvento = formatoFecha.parse(fechaTexto);&#10;&#10;            // Obtener fecha actual&#10;            Calendar hoy = Calendar.getInstance();&#10;            hoy.set(Calendar.HOUR_OF_DAY, 0);&#10;            hoy.set(Calendar.MINUTE, 0);&#10;            hoy.set(Calendar.SECOND, 0);&#10;            hoy.set(Calendar.MILLISECOND, 0);&#10;            Date fechaActual = hoy.getTime();&#10;&#10;            // Verificar que la fecha del evento sea posterior a hoy&#10;            if (fechaEvento.before(fechaActual) || fechaEvento.equals(fechaActual)) {&#10;                throw new DatosIncompletosException(&quot;La fecha del evento debe ser posterior a la fecha actual&quot;);&#10;            }&#10;&#10;            return true;&#10;&#10;        } catch (ParseException e) {&#10;            try {&#10;                throw new DatosIncompletosException(&quot;Formato de fecha inválido. Use el formato MM/dd/yyyy (ejemplo: 12/25/2025)&quot;);&#10;            } catch (DatosIncompletosException ex) {&#10;                Toast.makeText(this, ex.getMessage(), Toast.LENGTH_LONG).show();&#10;                return false;&#10;            }&#10;        } catch (DatosIncompletosException e) {&#10;            Toast.makeText(this, e.getMessage(), Toast.LENGTH_SHORT).show();&#10;            return false;&#10;        }&#10;    }&#10;&#10;    private String obtenerTipoSeleccionado() {&#10;        int selectedId = rtipos.getCheckedRadioButtonId();&#10;        RadioButton radioButton = findViewById(selectedId);&#10;        int posicion = rtipos.indexOfChild(radioButton);&#10;        return posicion == 0 ? &quot;anuncio&quot; : &quot;evento&quot;;&#10;    }&#10;&#10;    private String obtenerAudienciaSeleccionada() {&#10;        List&lt;String&gt; audiencias = new ArrayList&lt;&gt;();&#10;        if (chkEst.isChecked()) audiencias.add(&quot;Estudiantes&quot;);&#10;        if (chkPrf.isChecked()) audiencias.add(&quot;Profesores&quot;);&#10;        if (chkAdm.isChecked()) audiencias.add(&quot;Administrativos&quot;);&#10;        return String.join(&quot;;&quot;, audiencias);&#10;    }&#10;&#10;    private int obtenerSiguienteId() {&#10;        int maxId = 0;&#10;        try {&#10;            File file = new File(getFilesDir(), &quot;comunicados.txt&quot;);&#10;            if (file.exists()) {&#10;                FileInputStream fis = openFileInput(&quot;comunicados.txt&quot;);&#10;                byte[] buffer = new byte[(int) file.length()];&#10;                fis.read(buffer);&#10;                fis.close();&#10;                String contenido = new String(buffer);&#10;                String[] lineas = contenido.split(&quot;\n&quot;);&#10;                for (String linea : lineas) {&#10;                    if (!linea.trim().isEmpty()) {&#10;                        String[] partes = linea.split(&quot;,&quot;);&#10;                        if (partes.length &gt; 0) {&#10;                            try {&#10;                                int id = Integer.parseInt(partes[0]);&#10;                                if (id &gt; maxId) maxId = id;&#10;                            } catch (NumberFormatException e) {&#10;                                // Ignorar líneas mal formateadas&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            Toast.makeText(this, &quot;Error al leer comunicados existentes&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;        return maxId + 1;&#10;    }&#10;&#10;    private boolean guardarComunicado(String lineaComunicado) {&#10;        try {&#10;            FileOutputStream fos = openFileOutput(&quot;comunicados.txt&quot;, MODE_APPEND);&#10;            fos.write((lineaComunicado + &quot;\n&quot;).getBytes());&#10;            fos.close();&#10;            return true;&#10;        } catch (IOException e) {&#10;            return false;&#10;        }&#10;    }&#10;&#10;    public void mostrarCampo(int posicion) {&#10;        // Oculta todos los campos primero&#10;        textLugar.setVisibility(View.GONE);&#10;        editLugar.setVisibility(View.GONE);&#10;        textFecha.setVisibility(View.GONE);&#10;        editFecha.setVisibility(View.GONE);&#10;        textUrgencia.setVisibility(View.GONE);&#10;        spUrgencia.setVisibility(View.GONE);&#10;&#10;        // Muestra solo los necesarios según la posición&#10;        switch (posicion) {&#10;            case 0:&#10;                textUrgencia.setVisibility(View.VISIBLE);&#10;                spUrgencia.setVisibility(View.VISIBLE);&#10;                break;&#10;            case 1:&#10;                textLugar.setVisibility(View.VISIBLE);&#10;                editLugar.setVisibility(View.VISIBLE);&#10;                textFecha.setVisibility(View.VISIBLE);&#10;                editFecha.setVisibility(View.VISIBLE);&#10;                break;&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.comunicadosespol;&#10;&#10;import android.content.Intent;&#10;import android.net.Uri;&#10;import android.os.Bundle;&#10;import android.provider.MediaStore;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.CheckBox;&#10;import android.widget.EditText;&#10;import android.widget.ImageSwitcher;&#10;import android.widget.ImageView;&#10;import android.widget.RadioButton;&#10;import android.widget.RadioGroup;&#10;import android.widget.Spinner;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.activity.EdgeToEdge;&#10;import androidx.annotation.Nullable;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;&#10;import java.io.BufferedWriter;&#10;import java.io.File;&#10;import java.io.FileInputStream;&#10;import java.io.FileOutputStream;&#10;import java.io.FileWriter;&#10;import java.io.IOException;&#10;import java.io.InputStream;&#10;import java.io.OutputStream;&#10;import java.text.ParseException;&#10;import java.text.SimpleDateFormat;&#10;import java.util.ArrayList;&#10;import java.util.Calendar;&#10;import java.util.Date;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;import Modelo.DatosIncompletosException;&#10;&#10;public class PublComunicadosActivity extends AppCompatActivity {&#10;    private RadioGroup rtipos;&#10;    private Spinner spArea;&#10;    private CheckBox chkEst;&#10;    private CheckBox chkPrf;&#10;    private CheckBox chkAdm;&#10;    private EditText editTitle;&#10;    private EditText editDesc;&#10;    private Button btnImg;&#10;    private Button btnPublicar;&#10;    private Button btnCancelar;&#10;    private Uri imageUri;&#10;&#10;    private TextView textLugar;&#10;    private EditText editLugar;&#10;    private TextView textFecha;&#10;    private EditText editFecha;&#10;    private TextView textUrgencia;&#10;    private Spinner spUrgencia;&#10;    private ImageView vistaImagen;&#10;    private static final int PICK_IMAGE = 100;&#10;    private String savedImagePath;&#10;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        EdgeToEdge.enable(this);&#10;        setContentView(R.layout.activity_publ_comunicados);&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -&gt; {&#10;            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);&#10;            return insets;&#10;        });&#10;&#10;        // Inicializar todos los campos&#10;        textLugar = findViewById(R.id.textLugar);&#10;        editLugar = findViewById(R.id.editTextLugar);&#10;&#10;        textFecha = findViewById(R.id.textFecha);&#10;        editFecha = findViewById(R.id.editTextFecha);&#10;&#10;        textUrgencia = findViewById(R.id.textUrgencia);&#10;        spUrgencia = findViewById(R.id.spinnerUrgencia);&#10;&#10;        vistaImagen = findViewById(R.id.imageView);&#10;&#10;        editTitle = findViewById(R.id.editTextTitulo);&#10;        editDesc = findViewById(R.id.editTextDescripcion);&#10;        spArea = findViewById(R.id.spinArea);&#10;        chkEst = findViewById(R.id.chEstudiantes);&#10;        chkPrf = findViewById(R.id.Profesores);&#10;        chkAdm = findViewById(R.id.chAdministrativo);&#10;&#10;        btnImg = findViewById(R.id.btnCargarImagen);&#10;        btnPublicar = findViewById(R.id.btnPubl);&#10;        rtipos = findViewById(R.id.rdTipo);&#10;        btnCancelar = findViewById(R.id.btnAtras);&#10;        btnImg.setOnClickListener(v -&gt; openGallery());&#10;&#10;&#10;&#10;        rtipos.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {&#10;            @Override&#10;            public void onCheckedChanged(RadioGroup group, int checkedId) {&#10;                // 'checkedId' es el id del RadioButton seleccionado&#10;                if (checkedId != -1) { // -1 significa que no hay selección&#10;                    // Buscar el RadioButton por su id&#10;                    RadioButton radioSeleccionado = findViewById(checkedId);&#10;                    int posicion = group.indexOfChild(radioSeleccionado);&#10;&#10;                    // Ejemplo: si no es la primera opción&#10;                    if (!(posicion &lt; 0 || posicion &gt; 1)) {&#10;                        mostrarCampo(posicion);&#10;                    }&#10;                }&#10;            }&#10;        });&#10;&#10;&#10;&#10;    }&#10;&#10;    private void openGallery() {&#10;        Intent gallery = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);&#10;        startActivityForResult(gallery, PICK_IMAGE);&#10;    }&#10;&#10;    @Override&#10;    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {&#10;        super.onActivityResult(requestCode, resultCode, data);&#10;&#10;        if (requestCode == PICK_IMAGE &amp;&amp; resultCode == RESULT_OK &amp;&amp; data != null) {&#10;            imageUri = data.getData();&#10;            // Guardar la imagen seleccionada en almacenamiento interno&#10;            savedImagePath = saveImageToInternalStorage(imageUri);&#10;            if (savedImagePath != null) {&#10;                vistaImagen.setImageURI(Uri.fromFile(new File(savedImagePath)));&#10;                Toast.makeText(this, &quot;Imagen guardada localmente&quot;, Toast.LENGTH_SHORT).show();&#10;            } else {&#10;                Toast.makeText(this, &quot;Error al guardar la imagen&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        }&#10;    }&#10;&#10;    private String saveImageToInternalStorage(Uri uri) {&#10;        try {&#10;            InputStream inputStream = getContentResolver().openInputStream(uri);&#10;            File imageFile = new File(getFilesDir(), &quot;comunicado_img_&quot; + System.currentTimeMillis() + &quot;.jpg&quot;);&#10;            OutputStream outputStream = new FileOutputStream(imageFile);&#10;            byte[] buffer = new byte[4096];&#10;            int bytesRead;&#10;            while ((bytesRead = inputStream.read(buffer)) != -1) {&#10;                outputStream.write(buffer, 0, bytesRead);&#10;            }&#10;            outputStream.close();&#10;            inputStream.close();&#10;            return imageFile.getAbsolutePath();&#10;        } catch (Exception e) {&#10;            return null;&#10;        }&#10;    }&#10;&#10;    private void saveImagePathToFile(String path) {&#10;        try {&#10;            FileOutputStream fos = openFileOutput(&quot;image_path.txt&quot;, MODE_PRIVATE);&#10;            fos.write(path.getBytes());&#10;            fos.close();&#10;        } catch (IOException e) {&#10;            Toast.makeText(this, &quot;Error al guardar la ruta de la imagen&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    public void cargarImg(View view){&#10;        // Cargar la imagen guardada desde almacenamiento interno&#10;        try {&#10;            File file = new File(getFilesDir(), &quot;image_path.txt&quot;);&#10;            if (file.exists()) {&#10;                InputStream is = openFileInput(&quot;image_path.txt&quot;);&#10;                byte[] buffer = new byte[(int) file.length()];&#10;                is.read(buffer);&#10;                is.close();&#10;                String path = new String(buffer);&#10;                File imgFile = new File(path);&#10;                if (imgFile.exists()) {&#10;                    vistaImagen.setImageURI(Uri.fromFile(imgFile));&#10;                    Toast.makeText(this, &quot;Imagen cargada&quot;, Toast.LENGTH_SHORT).show();&#10;                } else {&#10;                    Toast.makeText(this, &quot;No se encontró la imagen guardada&quot;, Toast.LENGTH_SHORT).show();&#10;                }&#10;            } else {&#10;                Toast.makeText(this, &quot;No hay imagen guardada&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        } catch (Exception e) {&#10;            Toast.makeText(this, &quot;Error al cargar la imagen&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    public void publicarComunicado(View view){&#10;        // Validar que todos los campos necesarios estén llenos&#10;        if (!validarCampos()) {&#10;            return;&#10;        }&#10;&#10;        // Obtener datos comunes&#10;        String tipo = obtenerTipoSeleccionado();&#10;        String area = spArea.getSelectedItem().toString();&#10;        String titulo = editTitle.getText().toString().trim();&#10;        String audiencia = obtenerAudienciaSeleccionada();&#10;        String descripcion = editDesc.getText().toString().trim();&#10;        String nombreImagen = savedImagePath != null ? new File(savedImagePath).getName() : &quot;&quot;;&#10;&#10;        // Generar ID único&#10;        int nuevoId = obtenerSiguienteId();&#10;&#10;        // Crear línea para guardar según el tipo&#10;        String lineaComunicado = &quot;&quot;;&#10;        if (tipo.equals(&quot;anuncio&quot;)) {&#10;            String urgencia = spUrgencia.getSelectedItem().toString();&#10;            lineaComunicado = nuevoId + &quot;,&quot; + tipo + &quot;,&quot; + area + &quot;,&quot; + titulo + &quot;,&quot; +&#10;                            audiencia + &quot;,&quot; + descripcion + &quot;,&quot; + nombreImagen + &quot;,&quot; + urgencia;&#10;        } else if (tipo.equals(&quot;evento&quot;)) {&#10;            String lugar = editLugar.getText().toString().trim();&#10;            String fecha = editFecha.getText().toString().trim();&#10;            lineaComunicado = nuevoId + &quot;,&quot; + tipo + &quot;,&quot; + area + &quot;,&quot; + titulo + &quot;,&quot; +&#10;                            audiencia + &quot;,&quot; + descripcion + &quot;,&quot; + nombreImagen + &quot;,&quot; + lugar + &quot;,&quot; + fecha;&#10;&#10;        }&#10;        Toast.makeText(this, lineaComunicado, Toast.LENGTH_SHORT).show();&#10;        // Guardar en comunicados.txt&#10;        if (guardarComunicado(lineaComunicado)) {&#10;            if (savedImagePath != null) {&#10;                saveImagePathToFile(savedImagePath);&#10;            }&#10;            Toast.makeText(this, &quot;Comunicado publicado exitosamente&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;        } else {&#10;            Toast.makeText(this, &quot;Error al publicar el comunicado&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;    public void cancelar(View view){&#10;        // Eliminar la imagen guardada si existe&#10;        if (savedImagePath != null) {&#10;            File imgFile = new File(savedImagePath);&#10;            if (imgFile.exists()) {&#10;                imgFile.delete();&#10;            }&#10;            // También elimina el archivo de ruta&#10;            File pathFile = new File(getFilesDir(), &quot;image_path.txt&quot;);&#10;            if (pathFile.exists()) {&#10;                pathFile.delete();&#10;            }&#10;        }&#10;        finish();&#10;    }&#10;&#10;    private boolean validarCampos() {&#10;        try {&#10;            if (editTitle.getText().toString().trim().isEmpty()) {&#10;                throw new DatosIncompletosException(&quot;Ingrese un título&quot;);&#10;            }&#10;            if (editDesc.getText().toString().trim().isEmpty()) {&#10;                throw new DatosIncompletosException(&quot;Ingrese una descripción&quot;);&#10;            }&#10;            if (spArea.getSelectedItemPosition() == 0) {&#10;                throw new DatosIncompletosException(&quot;Seleccione un área&quot;);&#10;            }&#10;            if (!chkEst.isChecked() &amp;&amp; !chkPrf.isChecked() &amp;&amp; !chkAdm.isChecked()) {&#10;                throw new DatosIncompletosException(&quot;Seleccione al menos una audiencia&quot;);&#10;            }&#10;&#10;            String tipo = obtenerTipoSeleccionado();&#10;            if (tipo.equals(&quot;anuncio&quot;) &amp;&amp; spUrgencia.getSelectedItemPosition() == 0) {&#10;                throw new DatosIncompletosException(&quot;Seleccione un nivel de urgencia&quot;);&#10;            }&#10;            if (tipo.equals(&quot;evento&quot;)) {&#10;                if (editLugar.getText().toString().trim().isEmpty()) {&#10;                    throw new DatosIncompletosException(&quot;Ingrese el lugar del evento&quot;);&#10;                }&#10;                if (editFecha.getText().toString().trim().isEmpty()) {&#10;                    throw new DatosIncompletosException(&quot;Ingrese la fecha del evento&quot;);&#10;                }&#10;                // Validar formato y que la fecha sea futura&#10;                if (!validarFechaEvento(editFecha.getText().toString().trim())) {&#10;                    return false;&#10;                }&#10;            }&#10;&#10;            return true;&#10;&#10;        } catch (DatosIncompletosException e) {&#10;            Toast.makeText(this, e.getMessage(), Toast.LENGTH_SHORT).show();&#10;            return false;&#10;        }&#10;    }&#10;&#10;    private boolean validarFechaEvento(String fechaTexto) {&#10;        SimpleDateFormat formatoFecha = new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault());&#10;        formatoFecha.setLenient(false); // No permitir fechas inválidas como 32/13/2024&#10;&#10;        try {&#10;            // Verificar formato&#10;            Date fechaEvento = formatoFecha.parse(fechaTexto);&#10;&#10;            // Obtener fecha actual&#10;            Calendar hoy = Calendar.getInstance();&#10;            hoy.set(Calendar.HOUR_OF_DAY, 0);&#10;            hoy.set(Calendar.MINUTE, 0);&#10;            hoy.set(Calendar.SECOND, 0);&#10;            hoy.set(Calendar.MILLISECOND, 0);&#10;            Date fechaActual = hoy.getTime();&#10;&#10;            // Verificar que la fecha del evento sea posterior a hoy&#10;            if (fechaEvento.before(fechaActual) || fechaEvento.equals(fechaActual)) {&#10;                throw new DatosIncompletosException(&quot;La fecha del evento debe ser posterior a la fecha actual&quot;);&#10;            }&#10;&#10;            return true;&#10;&#10;        } catch (ParseException e) {&#10;            try {&#10;                throw new DatosIncompletosException(&quot;Formato de fecha inválido. Use el formato dd/MM/yyyy (ejemplo: 25/12/2025)&quot;);&#10;            } catch (DatosIncompletosException ex) {&#10;                Toast.makeText(this, ex.getMessage(), Toast.LENGTH_LONG).show();&#10;                return false;&#10;            }&#10;        } catch (DatosIncompletosException e) {&#10;            Toast.makeText(this, e.getMessage(), Toast.LENGTH_SHORT).show();&#10;            return false;&#10;        }&#10;    }&#10;&#10;    private String obtenerTipoSeleccionado() {&#10;        int selectedId = rtipos.getCheckedRadioButtonId();&#10;        RadioButton radioButton = findViewById(selectedId);&#10;        int posicion = rtipos.indexOfChild(radioButton);&#10;        return posicion == 0 ? &quot;anuncio&quot; : &quot;evento&quot;;&#10;    }&#10;&#10;    private String obtenerAudienciaSeleccionada() {&#10;        List&lt;String&gt; audiencias = new ArrayList&lt;&gt;();&#10;        if (chkEst.isChecked()) audiencias.add(&quot;Estudiantes&quot;);&#10;        if (chkPrf.isChecked()) audiencias.add(&quot;Profesores&quot;);&#10;        if (chkAdm.isChecked()) audiencias.add(&quot;Administrativos&quot;);&#10;        return String.join(&quot;;&quot;, audiencias);&#10;    }&#10;&#10;    private int obtenerSiguienteId() {&#10;        int maxId = 0;&#10;        try {&#10;            File file = new File(getFilesDir(), &quot;comunicados.txt&quot;);&#10;            if (file.exists()) {&#10;                FileInputStream fis = openFileInput(&quot;comunicados.txt&quot;);&#10;                byte[] buffer = new byte[(int) file.length()];&#10;                fis.read(buffer);&#10;                fis.close();&#10;                String contenido = new String(buffer);&#10;                String[] lineas = contenido.split(&quot;\n&quot;);&#10;                for (String linea : lineas) {&#10;                    if (!linea.trim().isEmpty()) {&#10;                        String[] partes = linea.split(&quot;,&quot;);&#10;                        if (partes.length &gt; 0) {&#10;                            try {&#10;                                int id = Integer.parseInt(partes[0]);&#10;                                if (id &gt; maxId) maxId = id;&#10;                            } catch (NumberFormatException e) {&#10;                                // Ignorar líneas mal formateadas&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            Toast.makeText(this, &quot;Error al leer comunicados existentes&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;        return maxId + 1;&#10;    }&#10;&#10;    private boolean guardarComunicado(String lineaComunicado) {&#10;        try {&#10;            FileOutputStream fos = openFileOutput(&quot;comunicados.txt&quot;, MODE_APPEND);&#10;            fos.write((lineaComunicado + &quot;\n&quot;).getBytes());&#10;            fos.close();&#10;            return true;&#10;        } catch (IOException e) {&#10;            return false;&#10;        }&#10;    }&#10;&#10;    public void mostrarCampo(int posicion) {&#10;        // Oculta todos los campos primero&#10;        textLugar.setVisibility(View.GONE);&#10;        editLugar.setVisibility(View.GONE);&#10;        textFecha.setVisibility(View.GONE);&#10;        editFecha.setVisibility(View.GONE);&#10;        textUrgencia.setVisibility(View.GONE);&#10;        spUrgencia.setVisibility(View.GONE);&#10;&#10;        // Muestra solo los necesarios según la posición&#10;        switch (posicion) {&#10;            case 0:&#10;                textUrgencia.setVisibility(View.VISIBLE);&#10;                spUrgencia.setVisibility(View.VISIBLE);&#10;                break;&#10;            case 1:&#10;                textLugar.setVisibility(View.VISIBLE);&#10;                editLugar.setVisibility(View.VISIBLE);&#10;                textFecha.setVisibility(View.VISIBLE);&#10;                editFecha.setVisibility(View.VISIBLE);&#10;                break;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/comunicadosespol/VerComunicadosActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/comunicadosespol/VerComunicadosActivity.java" />
              <option name="originalContent" value="package com.example.comunicadosespol;&#10;&#10;&#10;import android.net.Uri;&#10;import android.os.Bundle;&#10;import android.view.View;&#10;import android.widget.EditText;&#10;import android.widget.ImageView;&#10;import android.widget.LinearLayout;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.activity.EdgeToEdge;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;&#10;import java.io.BufferedReader;&#10;import java.io.File;&#10;import java.io.FileInputStream;&#10;import java.io.IOException;&#10;import java.io.InputStream;&#10;import java.io.InputStreamReader;&#10;import java.text.ParseException;&#10;import java.text.SimpleDateFormat;&#10;import java.util.ArrayList;&#10;import java.util.Calendar;&#10;import java.util.Date;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;import Modelo.Comunicado;&#10;import Modelo.Anuncio;&#10;import Modelo.DatosIncompletosException;&#10;import Modelo.Evento;&#10;&#10;public class VerComunicadosActivity extends AppCompatActivity {&#10;    private LinearLayout contenedor;&#10;    private List&lt;Comunicado&gt; listaComunicados;&#10;    private EditText fechaFiltro;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        EdgeToEdge.enable(this);&#10;        setContentView(R.layout.activity_ver_comunicados);&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -&gt; {&#10;            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);&#10;            return insets;&#10;        });&#10;&#10;        contenedor = findViewById(R.id.layoutContenedor);&#10;        listaComunicados = new ArrayList&lt;&gt;();&#10;        fechaFiltro = findViewById(R.id.filtroDate);&#10;&#10;        cargarComunicados(&quot;comunicados.txt&quot;);&#10;&#10;&#10;    }&#10;&#10;&#10;    private boolean validarFechaEvento(String fechaTexto) {&#10;        SimpleDateFormat formatoFecha = new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault());&#10;        formatoFecha.setLenient(false); // No permitir fechas inválidas como 32/13/2024&#10;&#10;        try {&#10;            // Verificar formato&#10;            Date fechaEvento = formatoFecha.parse(fechaTexto);&#10;&#10;            // Obtener fecha actual&#10;            Calendar hoy = Calendar.getInstance();&#10;            hoy.set(Calendar.HOUR_OF_DAY, 0);&#10;            hoy.set(Calendar.MINUTE, 0);&#10;            hoy.set(Calendar.SECOND, 0);&#10;            hoy.set(Calendar.MILLISECOND, 0);&#10;            Date fechaActual = hoy.getTime();&#10;&#10;            // Verificar que la fecha del evento sea posterior a hoy&#10;            if (fechaEvento.before(fechaActual) || fechaEvento.equals(fechaActual)) {&#10;                throw new DatosIncompletosException(&quot;La fecha del evento debe ser posterior a la fecha actual&quot;);&#10;            }&#10;&#10;            return true;&#10;&#10;        } catch (ParseException e) {&#10;            try {&#10;                throw new DatosIncompletosException(&quot;Formato de fecha inválido. Use el formato dd/MM/yyyy (ejemplo: 25/12/2025)&quot;);&#10;            } catch (DatosIncompletosException ex) {&#10;                Toast.makeText(this, ex.getMessage(), Toast.LENGTH_LONG).show();&#10;                return false;&#10;            }&#10;        } catch (DatosIncompletosException e) {&#10;            Toast.makeText(this, e.getMessage(), Toast.LENGTH_SHORT).show();&#10;            return false;&#10;        }&#10;    }&#10;    // Carga todos los comunicados del archivo interno comunicados.txt&#10;    private void cargarComunicados(String nombreArchivo) {&#10;        int count = 0;&#10;&#10;        try {&#10;            // Primero intentar cargar desde almacenamiento interno&#10;            File file = new File(getFilesDir(), nombreArchivo);&#10;            if (file.exists()) {&#10;                FileInputStream fis = openFileInput(nombreArchivo);&#10;                byte[] buffer = new byte[(int) file.length()];&#10;                fis.read(buffer);&#10;                fis.close();&#10;                String contenido = new String(buffer);&#10;                String[] lineas = contenido.split(&quot;\n&quot;);&#10;&#10;                for (String linea : lineas) {&#10;                    linea = linea.trim();&#10;                    if (!linea.isEmpty()) {&#10;                        Comunicado comunicado = crearComunicado(linea);&#10;                        if (comunicado != null ) {&#10;                            listaComunicados.add(comunicado);&#10;                            agregarComunicadoAlLayout(comunicado);&#10;                            count++;&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                // Si no existe en almacenamiento interno, cargar desde assets&#10;                try (InputStream is = getAssets().open(nombreArchivo);&#10;                     BufferedReader br = new BufferedReader(new InputStreamReader(is))) {&#10;&#10;                    String linea;&#10;                    while ((linea = br.readLine()) != null) {&#10;                        linea = linea.trim();&#10;                        if (!linea.isEmpty()) {&#10;                            Comunicado comunicado = crearComunicado(linea);&#10;                            if (comunicado != null) {&#10;&#10;                                listaComunicados.add(comunicado);&#10;                                agregarComunicadoAlLayout(comunicado);&#10;                                count++;&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        } catch (IOException e) {&#10;            Toast.makeText(this, &quot;No se pudieron cargar los comunicados&quot;, Toast.LENGTH_LONG).show();&#10;        }&#10;&#10;        if (count == 0) {&#10;            Toast.makeText(this, &quot;No hay comunicados para mostrar&quot;, Toast.LENGTH_LONG).show();&#10;        }&#10;    }&#10;&#10;    // Crea instancias de Anuncio o Evento según el tipo&#10;    private Comunicado crearComunicado(String linea) {&#10;        String[] partes = linea.split(&quot;,&quot;);&#10;&#10;        // Formato esperado: id,tipo,area,titulo,audiencia,descripcion,imagen,campo_extra[,campo_extra2]&#10;        if (partes.length &lt; 7) return null;&#10;&#10;        try {&#10;            String tipo = partes[1].trim();&#10;            String area = partes[2].trim();&#10;            String titulo = partes[3].trim();&#10;            String audiencia = partes[4].trim();&#10;            String descripcion = partes[5].trim();&#10;            String nombreImagen = partes[6].trim();&#10;&#10;            if (tipo.equals(&quot;anuncio&quot;) &amp;&amp; partes.length &gt;= 8) {&#10;                String nivelUrgencia = partes[7].trim();&#10;                return new Anuncio(tipo, area, titulo, audiencia, descripcion, nombreImagen, nivelUrgencia);&#10;            } else if (tipo.equals(&quot;evento&quot;) &amp;&amp; partes.length &gt;= 9) {&#10;                String lugar = partes[7].trim();&#10;                String fecha = partes[8].trim();&#10;                return new Evento(tipo, area, titulo, audiencia, descripcion, nombreImagen, lugar, fecha);&#10;            }&#10;        } catch (Exception e) {&#10;            Toast.makeText(this, &quot;Error al procesar comunicado: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;        }&#10;&#10;        return null;&#10;    }&#10;&#10;    // Agrega un comunicado al layout visual&#10;    private void agregarComunicadoAlLayout(Comunicado comunicado) {&#10;&#10;        View item = getLayoutInflater().inflate(R.layout.item_comunicado, contenedor, false);&#10;&#10;        // Título&#10;        TextView tvTitulo = item.findViewById(R.id.tvTitulo);&#10;        tvTitulo.setText(comunicado.getTitulo());&#10;&#10;        // Imagen&#10;        ImageView img = item.findViewById(R.id.imgComunicado);&#10;        String nombreImagen = comunicado.getNombreArchivoImg();&#10;        if (nombreImagen.isEmpty()) {&#10;            img.setVisibility(View.GONE);&#10;        } else {&#10;            // Intentar cargar desde almacenamiento interno primero&#10;            File imagenInterna = new File(getFilesDir(), nombreImagen);&#10;            if (imagenInterna.exists()) {&#10;                // Cargar imagen desde almacenamiento interno&#10;                Uri imageUri = Uri.fromFile(imagenInterna);&#10;                img.setImageURI(imageUri);&#10;                img.setVisibility(View.VISIBLE);&#10;            } else {&#10;                // Si no existe en almacenamiento interno, intentar cargar desde drawable resources&#10;                int resId = getResources().getIdentifier(&#10;                    nombreImagen.replace(&quot;.png&quot;, &quot;&quot;).replace(&quot;.jpg&quot;, &quot;&quot;),&#10;                    &quot;drawable&quot;,&#10;                    getPackageName()&#10;                );&#10;                if (resId != 0) {&#10;                    img.setImageResource(resId);&#10;                    img.setVisibility(View.VISIBLE);&#10;                } else {&#10;                    img.setImageResource(android.R.drawable.ic_menu_report_image);&#10;                    img.setVisibility(View.VISIBLE);&#10;                }&#10;            }&#10;        }&#10;&#10;        // Información detallada según el tipo&#10;        TextView tvInfo = item.findViewById(R.id.tvInfo);&#10;        String info = comunicado.getDescripcion();&#10;        tvInfo.setText(info);&#10;&#10;        // Link - por ahora no se usa, se puede ocultar&#10;        TextView tvLink = item.findViewById(R.id.tvLink);&#10;        tvLink.setVisibility(View.GONE);&#10;&#10;        contenedor.addView(item);&#10;    }&#10;&#10;    // Construye la información a mostrar según el tipo de comunicado&#10;&#10;&#10;&#10;    public void volver(View view) {&#10;        finish(); // cierra esta activity y regresa a la anterior&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.comunicadosespol;&#10;&#10;&#10;import android.net.Uri;&#10;import android.os.Bundle;&#10;import android.view.View;&#10;import android.widget.EditText;&#10;import android.widget.ImageView;&#10;import android.widget.LinearLayout;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.activity.EdgeToEdge;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;&#10;import java.io.BufferedReader;&#10;import java.io.File;&#10;import java.io.FileInputStream;&#10;import java.io.IOException;&#10;import java.io.InputStream;&#10;import java.io.InputStreamReader;&#10;import java.text.ParseException;&#10;import java.text.SimpleDateFormat;&#10;import java.util.ArrayList;&#10;import java.util.Calendar;&#10;import java.util.Date;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;import Modelo.Comunicado;&#10;import Modelo.Anuncio;&#10;import Modelo.DatosIncompletosException;&#10;import Modelo.Evento;&#10;&#10;public class VerComunicadosActivity extends AppCompatActivity {&#10;    private LinearLayout contenedor;&#10;    private List&lt;Comunicado&gt; listaComunicados;&#10;    private EditText fechaFiltro;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        EdgeToEdge.enable(this);&#10;        setContentView(R.layout.activity_ver_comunicados);&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -&gt; {&#10;            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);&#10;            return insets;&#10;        });&#10;&#10;        contenedor = findViewById(R.id.layoutContenedor);&#10;        listaComunicados = new ArrayList&lt;&gt;();&#10;        fechaFiltro = findViewById(R.id.filtroDate);&#10;&#10;        cargarComunicados(&quot;comunicados.txt&quot;);&#10;&#10;&#10;    }&#10;&#10;&#10;    private boolean validarFechaEvento(String fechaTexto) {&#10;        SimpleDateFormat formatoFecha = new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault());&#10;        formatoFecha.setLenient(false); // No permitir fechas inválidas como 32/13/2024&#10;&#10;        try {&#10;            // Verificar formato&#10;            Date fechaEvento = formatoFecha.parse(fechaTexto);&#10;&#10;            // Obtener fecha actual&#10;            Calendar hoy = Calendar.getInstance();&#10;            hoy.set(Calendar.HOUR_OF_DAY, 0);&#10;            hoy.set(Calendar.MINUTE, 0);&#10;            hoy.set(Calendar.SECOND, 0);&#10;            hoy.set(Calendar.MILLISECOND, 0);&#10;            Date fechaActual = hoy.getTime();&#10;&#10;            // Verificar que la fecha del evento sea posterior a hoy&#10;            if (fechaEvento.before(fechaActual) || fechaEvento.equals(fechaActual)) {&#10;                throw new DatosIncompletosException(&quot;La fecha del evento debe ser posterior a la fecha actual&quot;);&#10;            }&#10;&#10;            return true;&#10;&#10;        } catch (ParseException e) {&#10;            try {&#10;                throw new DatosIncompletosException(&quot;Formato de fecha inválido. Use el formato dd/MM/yyyy (ejemplo: 25/12/2025)&quot;);&#10;            } catch (DatosIncompletosException ex) {&#10;                Toast.makeText(this, ex.getMessage(), Toast.LENGTH_LONG).show();&#10;                return false;&#10;            }&#10;        } catch (DatosIncompletosException e) {&#10;            Toast.makeText(this, e.getMessage(), Toast.LENGTH_SHORT).show();&#10;            return false;&#10;        }&#10;    }&#10;    // Carga todos los comunicados del archivo interno comunicados.txt&#10;    private void cargarComunicados(String nombreArchivo) {&#10;        int count = 0;&#10;&#10;        try {&#10;            // Primero intentar cargar desde almacenamiento interno&#10;            File file = new File(getFilesDir(), nombreArchivo);&#10;            if (file.exists()) {&#10;                FileInputStream fis = openFileInput(nombreArchivo);&#10;                byte[] buffer = new byte[(int) file.length()];&#10;                fis.read(buffer);&#10;                fis.close();&#10;                String contenido = new String(buffer);&#10;                String[] lineas = contenido.split(&quot;\n&quot;);&#10;&#10;                for (String linea : lineas) {&#10;                    linea = linea.trim();&#10;                    if (!linea.isEmpty()) {&#10;                        Comunicado comunicado = crearComunicado(linea);&#10;                        if (comunicado != null ) {&#10;                            listaComunicados.add(comunicado);&#10;                            agregarComunicadoAlLayout(comunicado);&#10;                            count++;&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                // Si no existe en almacenamiento interno, cargar desde assets&#10;                try (InputStream is = getAssets().open(nombreArchivo);&#10;                     BufferedReader br = new BufferedReader(new InputStreamReader(is))) {&#10;&#10;                    String linea;&#10;                    while ((linea = br.readLine()) != null) {&#10;                        linea = linea.trim();&#10;                        if (!linea.isEmpty()) {&#10;                            Comunicado comunicado = crearComunicado(linea);&#10;                            if (comunicado != null) {&#10;&#10;                                listaComunicados.add(comunicado);&#10;                                agregarComunicadoAlLayout(comunicado);&#10;                                count++;&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        } catch (IOException e) {&#10;            Toast.makeText(this, &quot;No se pudieron cargar los comunicados&quot;, Toast.LENGTH_LONG).show();&#10;        }&#10;&#10;        if (count == 0) {&#10;            Toast.makeText(this, &quot;No hay comunicados para mostrar&quot;, Toast.LENGTH_LONG).show();&#10;        }&#10;    }&#10;&#10;    // Crea instancias de Anuncio o Evento según el tipo&#10;    private Comunicado crearComunicado(String linea) {&#10;        String[] partes = linea.split(&quot;,&quot;);&#10;&#10;        // Formato esperado: id,tipo,area,titulo,audiencia,descripcion,imagen,campo_extra[,campo_extra2]&#10;        if (partes.length &lt; 7) return null;&#10;&#10;        try {&#10;            String tipo = partes[1].trim();&#10;            String area = partes[2].trim();&#10;            String titulo = partes[3].trim();&#10;            String audiencia = partes[4].trim();&#10;            String descripcion = partes[5].trim();&#10;            String nombreImagen = partes[6].trim();&#10;&#10;            if (tipo.equals(&quot;anuncio&quot;) &amp;&amp; partes.length &gt;= 8) {&#10;                String nivelUrgencia = partes[7].trim();&#10;                return new Anuncio(tipo, area, titulo, audiencia, descripcion, nombreImagen, nivelUrgencia);&#10;            } else if (tipo.equals(&quot;evento&quot;) &amp;&amp; partes.length &gt;= 9) {&#10;                String lugar = partes[7].trim();&#10;                String fecha = partes[8].trim();&#10;                return new Evento(tipo, area, titulo, audiencia, descripcion, nombreImagen, lugar, fecha);&#10;            }&#10;        } catch (Exception e) {&#10;            Toast.makeText(this, &quot;Error al procesar comunicado: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;        }&#10;&#10;        return null;&#10;    }&#10;&#10;    // Agrega un comunicado al layout visual&#10;    private void agregarComunicadoAlLayout(Comunicado comunicado) {&#10;&#10;        View item = getLayoutInflater().inflate(R.layout.item_comunicado, contenedor, false);&#10;&#10;        // Título&#10;        TextView tvTitulo = item.findViewById(R.id.tvTitulo);&#10;        tvTitulo.setText(comunicado.getTitulo());&#10;&#10;        // Imagen&#10;        ImageView img = item.findViewById(R.id.imgComunicado);&#10;        String nombreImagen = comunicado.getNombreArchivoImg();&#10;        if (nombreImagen.isEmpty()) {&#10;            img.setVisibility(View.GONE);&#10;        } else {&#10;            // Intentar cargar desde almacenamiento interno primero&#10;            File imagenInterna = new File(getFilesDir(), nombreImagen);&#10;            if (imagenInterna.exists()) {&#10;                // Cargar imagen desde almacenamiento interno&#10;                Uri imageUri = Uri.fromFile(imagenInterna);&#10;                img.setImageURI(imageUri);&#10;                img.setVisibility(View.VISIBLE);&#10;            } else {&#10;                // Si no existe en almacenamiento interno, intentar cargar desde drawable resources&#10;                int resId = getResources().getIdentifier(&#10;                    nombreImagen.replace(&quot;.png&quot;, &quot;&quot;).replace(&quot;.jpg&quot;, &quot;&quot;),&#10;                    &quot;drawable&quot;,&#10;                    getPackageName()&#10;                );&#10;                if (resId != 0) {&#10;                    img.setImageResource(resId);&#10;                    img.setVisibility(View.VISIBLE);&#10;                } else {&#10;                    img.setImageResource(android.R.drawable.ic_menu_report_image);&#10;                    img.setVisibility(View.VISIBLE);&#10;                }&#10;            }&#10;        }&#10;&#10;        // Información detallada según el tipo&#10;        TextView tvInfo = item.findViewById(R.id.tvInfo);&#10;        String info = comunicado.getDescripcion();&#10;        tvInfo.setText(info);&#10;&#10;        // Link - por ahora no se usa, se puede ocultar&#10;        TextView tvLink = item.findViewById(R.id.tvLink);&#10;        tvLink.setVisibility(View.GONE);&#10;&#10;        contenedor.addView(item);&#10;    }&#10;&#10;    // Construye la información a mostrar según el tipo de comunicado&#10;&#10;&#10;&#10;    public void volver(View view) {&#10;        finish(); // cierra esta activity y regresa a la anterior&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>